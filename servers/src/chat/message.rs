use serde::{Deserialize, Serialize};
use tokio_tungstenite::tungstenite::Message;
use uuid::Uuid;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(tag = "type", content = "data", rename_all_fields = "camelCase")]
pub enum WSMessage {
    /// When a new message is sent by a user. This will be sent to all chat members
    NewMessage(NewMessage),
    /// Should be the first message and is required to identify the user
    Login(LoginMessage),
    /// Can be manually called or generated by the server if the connection is lost
    Logout(LogoutMessage),
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(rename_all = "camelCase")]
pub struct NewMessage {
    /// ID of the creator of the message
    pub user_id: Uuid,
    /// Room that it was sent to
    pub room_id: Uuid,
    /// Server that it was sent to
    /// TODO: is this necessary or can we fetch the server from the DB since all room IDs will be
    /// unique?
    pub server_id: Uuid,
    /// The message content
    pub message: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(rename_all = "camelCase")]
pub struct LoginMessage {
    // TODO: Replace by jwt token
    pub user_id: Uuid,
}

#[derive(Serialize, Deserialize, Debug, PartialEq)]
#[serde(rename_all = "camelCase")]
pub struct LogoutMessage {}

impl WSMessage {
    pub fn new(message: &Option<Message>) -> Self {
        if let Some(m) = message {
            println!("New message recieved:  {}", m);
        }
        let message = match message {
            None => return WSMessage::Logout(LogoutMessage {}),
            Some(t) => t,
        };

        return match message {
            Message::Text(t) => {
                // TODO: properly handle this
                let message: WSMessage = serde_json::from_str(t).expect("Failed to parse message");
                message
            }
            Message::Binary(_) => todo!(),
            Message::Ping(_) => todo!(),
            Message::Pong(_) => todo!(),
            Message::Close(_) => WSMessage::Logout(LogoutMessage {}),
            Message::Frame(_) => todo!(),
        };
    }

    pub fn serialize(&self) -> String {
        // TODO: properly handle this
        serde_json::to_string(&self).expect("Failed to serialize message")
    }
}
